---
layout: post
title:      "Sinatra Project - Reclaim My Rep"
date:       2020-01-22 10:18:52 +0000
permalink:  sinatra_project_-_reclaim_my_rep
---


This project managed to sneak up even quicker than the first and what a wild ride it has been so far. After a little more than a week of working away, my Sinatra project is finally done. For this project I decided to create a web application called Reclaim My Rep. The idea of the project is to allow users to keep track of their elected representatives, storing thier reps, information about them, as well as record any contacts they may have with them. It also allows users to mark whether they received a response and/or if the response was actually meaningful to them. 

Starting this project was definitely a lot easier than the first. Having a better idea what to expect from the entire project process really gave me a chance to plan a little better and have a clearer idea of what my finished product should be. That being said, this project is probably the most defficult obstacle that I've overcome thus far. While the tools and the process were more familiar and allowed for a greater level of complexity, it also really pushed me into new and uncharted territory. 

Definitely the hardest and least familiar aspect for me was the CSS styling. Design is something that I struggled with as I generally have a hard time visualizing in my head what I want something to look like. Having a tool that provides so much precision in its complexity was really overwhelming at first. So many choices to make, so many different ways that I could achieve them, how could I ever figure out what I want? After freaking out a little bit, I decided to sit down and look at it as if I was programming logic, after all it is logic - just for styling. 

I sat down and broke everything down into its smallest component. The flexbox feature was really handy for this. It allowed me to create containers and nest them within one another to manipulate where I wanted certain objects in relation to others. After a lot of stumbling, and a few times starting the stylesheet over from scratch, things started to click into place. I started seeing where I could reuse layouts by creating generic classes, I started playing around with margins and borders to get cool effects, and overall I just started to have fun with the process of playing around with attributes to see how they changed my layouts.

In terms of the main logic of the program, I created a User, Rep, and Contact model with matching controllers and views. Each model was given a home(show), create, edit, and delete route with the models acting as a sort of hub for thier respective view pages. Each user can associate an address with their account that the website can use to find their representatives for them.

Users have the capability to add Reps manually, but there is also an option the uses the users address to send a request to Google's Civic Information API. The way I configured the call, when the user clicks the find my rep button, the call returns the data for the two senators and one congressional rep for the address. That information is then taken and used to create three rep objects and assign them to that user. The Google API returns so much information, it was really fun to pick through that data and find the parts that I thought would be most useful with this application. 

I think the most interesting part of the project was learning how to secure the different routes and prevent data from being manipulated by people other than the user. I learned about the before block in Sinatra, which is a really convenient way to implement some logic that you would like to run before a request is evaluated. For example, for this project I didn't want anyone to be able to access the site unless they were logged in. I was able to set a check that evaluates before the route to check which route was requested and if the user was logged in or not. Using this check I was able to redirect the user to the home page if they were to try and access another page without being logged in first.

Another fun tool I learned about was the rack-flash gem. This gem allows you to create messages that you can display right on the page. I used these in my project for things like alerting the user that thier password is incorrect, or that a username is already taken. I was really surprised how many places I found myself wanting to implement these, as they really helped give some good feedback to the user about what was actually going on with their data behind the scenes.

All in all, I feel extremely acomplished. At the beginning of the project I felt confident, that was quickly replaced by uncertainty and self doubt. This material really gave me the opportunity to push myself to see how far I could succeed. It also gave me the reassurance that this is hard, but I really can do it. Every roadblock is just an opportunity to learn, and even the biggest boulder can be cracked away at piece by piece until it is cleared. I ended this project week with a fully functional tool that I created from scratch, and that feels really good.
